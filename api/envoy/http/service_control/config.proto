
// Copyright 2018 Google Cloud Platform Proxy Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.api_proxy.envoy.http.service_control;

import "api/envoy/http/common/pattern.proto";
import "api/envoy/http/service_control/requirement.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

message HttpUri {
  // The uri string including the domain and path.
  string uri = 1;

  // The Envoy cluster name required for Envoy to make a remote call.
  string cluster = 2;

  // The timeout.
  google.protobuf.Duration timeout = 3;
}

message ServiceControlRule {
  // Use Envoy native RouteMatch so we can use Envoy native matching logic.
  repeated api.envoy.http.common.Pattern patterns = 1 [(validate.rules).repeated.min_items = 1];

  // The requirments for matched pattern.
  api.envoy.http.service_control.Requirement requires = 2;
}

// Per service config.
message Service {
  // The service name for the Google Service Control
  string service_name = 1 [(validate.rules).string.min_bytes = 1];

  // The service config id
  string service_config_id = 2;

  // The producer project id
  string producer_project_id = 3;

  // The Http uri to fetch access token, e.g. from metadata server
  HttpUri token_uri = 4;

  // The Http uri to call service control
  HttpUri service_control_uri = 5;

  // API name. Used for Chemist report request.
  string api_name = 6;

  // API version. Used for Chemist report request.
  string api_version = 7;
}

message FilterConfig {
  // A list of services supported on this Envoy server.
  repeated Service services = 1; // ref:multi-service

  // The requirement rules for incoming requests.
  repeated ServiceControlRule rules = 2;

  // The service name for the Google Service Control
  // TODO(tianyuc): move to per service config.
  string service_name = 3 [(validate.rules).string.min_bytes = 1];

  // The service config id
  // TODO(tianyuc): move to per service config.
  string service_config_id = 4;

  // The producer project id
  // TODO(tianyuc): move to per service config.
  string producer_project_id = 5;

  // The Http uri to call service control
  // TODO(tianyuc): move to per service config.
  HttpUri service_control_uri = 6;
}